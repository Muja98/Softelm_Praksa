using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using api.Entities;
using System.Linq;
using System.Threading.Tasks;
using api.Models;
using api.Relations;
using Microsoft.AspNetCore.Http;

namespace api.Services
{
    public interface IFarmieRepository
    {
        Task<bool> SaveChangesAsync();
        Task<IEnumerable<User>> GetUsersAsync();
        bool AddUserAsync(User farmer);
        Task<User> GetUserAsync(int id);
        bool UserExist(int userId);
        User GetUserById(int userId);
        void DeleteUser(User farmer);
        bool FarmerExist(int farmerId);
        Task<IEnumerable<Farm>> GetFarmsAsync(int farmerId);
        Task<Farm> GetFarmAsync(int farmerId, int farmId);
        bool FarmExist(int farmerId, int farmId);
        void AddFarmAsync(int farmerId, Farm farm);
        void AddTypeOfAnimal(int farmId, TypeOfAnimal toA, int breedId);
        bool TypeOfAnimalExist(int farmId, int typeOfAnimalId);
        bool TypeOfAnimalWithBreedExist(int farmId, int breedId);
        Task<IEnumerable<TypeOfAnimal>> GetTypesOfAnimal(int farmId);
        Task<TypeOfAnimal> GetTypeOfAnimal(int farmId, int typeOfAnimalId);
        bool FarmExist(int farmId);
        Task<IEnumerable<Possession>> GetPossessionsAsync(int farmId);
        bool PossessionExist(int possessionId);
        bool PossessionExist(int farmId, int possesisonId);
        Task<Possession> GetPossessionAsync(int farmId,int possessionId);
        void AddPossession(int farmId,Possession possession);
        void DeleteFarm(Farm farm);
        void DeletePossession(Possession possession);
        Task<int> NumberOf(int farmId);
        Task<IEnumerable<Possession>> GetCouple(int from,int to,int farmId);
        Task<IEnumerable<Product>> GetProductsAsync(int farmId);
        Task<Product> GetLastAddedProduct(int farmId, string type);
        bool ProductExist(int farmId, int productId);
        bool ProductExist(int farmId, string productName);
        //void AddProduct(int farmId, Product product,string type,IFormFile picture);
        Task<Product> AddProductWithoutPicture(int farmId,Product product,string type);
        Task<Product> GetProductAsync(int farmId, int productId);
        bool ProductExist(int productId);
        Task<Product> GetProductAsync(int farmId, string productName);
        Task<Product> GetProductAsync(int productId);
        void PostPictureForProduct(Product product,IFormFile picture);
        Task<IEnumerable<Product>> GetProductsAsync(int farmId, string productName);
        void DeleteTypeOfAnimal(TypeOfAnimal typeOfAnimal);
        void DeleteProduct(Product product);
        Task<IEnumerable<TypeOfAnimalEvent>> GetTypeOfAnimalEventsAsync(int farmId, int typeOfAniamId);
        bool SeasonExist(int seasonId);
        bool SeasonExist(int possessionId, int sesaonId);
        Task<IEnumerable<Season>> GetSeasonsAsync(int possessionId);
        Task<Season> GetSeasonAsync(int possessionId,int seasonId);
        void AddSeason(int possessionId,Season season);
        void DeleteSeason(Season season);
        bool SeasonEventExist(int seasonEventId);
        bool SeasonEventExist(int seasonId, int seasonEventId);
        Task<IEnumerable<SeasonEvent>> GetSeasonEventsAsync(int seasonId);
        Task<SeasonEvent> GetSeasonEventAsync(int seasonId,int seasonEventId);
        void AddSeasonEvent(int seasonId,SeasonEvent seasonEvent);
        void AddTypeOfAnimalEvent(int farmId, int typeOfAniamId, TypeOfAnimalEvent typeOfAnimalEvent, int productId);
        bool TypeOfAnimalEventExsists(int farmId, int TypeOfAnimalId, int eventId);
        Task<TypeOfAnimalEvent> GetTypeOfAnimalEventsAsync(int eventId);
        void DeleteTypeOfAnimalEvent(TypeOfAnimalEvent eventFromRepo);
        void DeleteSeasonEvent(SeasonEvent seasonEvent);
        bool TransactionExist(int transactionId);
        bool TransactionExist(int farmId, int transactionId);
        //Task<IEnumerable<Transaction>> GetUserTransactionsAsync(int userId);
        Task<IEnumerable<Transaction>> GetFarmTransactionsAsync(int farmId);
        //Task<Transaction> GetUserTransactionAsync(int userId,int transactionId);
        Task<Transaction> GetFarmTransactionAsync(int farmId,int transactionId);
        bool AddTransaction(int farmId,Transaction trsansaction,int productId);
        //void DeleteUserTransaction(Transaction transaction);
        void DeleteFarmTransaction(Transaction transaction);
        Task<IEnumerable<WorkingTask>> GetWorkingTasksForFarmAsync(int farmId);
        Task<IEnumerable<WorkingTask>> GetWorkingTasksForWorkerAsync(int workerId);
        bool WorkerExist(int workerId);
        bool WorkerExistOnFarm(int farmId, int workerId);
        Task<IEnumerable<WorkingTask>> GetWorkingTasksForFarmAndWorkerAsync(int farmId, int workerId);
        void AddWorkingTask(int farmId, int workerId, WorkingTask workingTask);
        Task<WorkingTask> GetWorkingTaskAsync(int workingTaskId);
        Task<IEnumerable<Animal>> GetAnimalsAsync(int farmId, int typeOfAnimalId);
        bool AnimalExist(int farmId, int typeOfAnimalId, int animalId);
        Task<Animal> GetAnimalAsync(int typeOfAnimalId, int animalId);
        void AddAnimal(int farmId, int typeOfAnimalId, Animal animal);
        void DeleteAnimal(Animal animal);
        Task<int> NumberOfTypesOfAnimals(int farmId);
        Task<IEnumerable<Product>> GelAllProductsAsync();
        bool OpenSeasonExistForPossession(int possessionId);
        Task<GetFarmExtraDataDto> GetFarmExtraDataAsync(int farmerId,int farmId);
        Task<GetPossessionExtraDataDto> GetPossessionExtraDataAsync(int farmId,int possessionId);
        bool TypeOfProductExist(string type);
        Task<ICollection<ProductType>> GetProductTypes();
        void AddProductType(ProductType productType);
        void DeleteProductType(int productTypeId);
        Task<IEnumerable<TypeOfAnimal>> GetTypesOfAnimalsFromTo(int farmId, int from, int to);
        Task<GetTypeOfAnimalsDtoExtraData> GetTypeOfAnimalExtraData(int farmId, int typeOfAnimalId);
        Task<IEnumerable<AnimalEvent>> GetAnimalEventsAsync(int animalId);
        void AddAnimalEvent(int animalId, AnimalEvent animalEvent);
        bool AnimalEventExist(int animalId, int eventId);
        Task<AnimalEvent> GetAnimalEventAsync(int eventId);
        void DeleteAnimalEvent(AnimalEvent animalEvent);
        Task<IEnumerable<WorkerExtraDataDto>> GetFarmerExtraData(int userId);
        bool WorkingTaskExsist(int farmId, int workerId, int workingTaskId);
        void DeleteWorkingTask(int workingTaskId);
        Task<IEnumerable<Breed>> GetBreedsAsync();
        Task<Breed> GetBreedAsync(int breedId);
        bool BreedExist(int breedId);
        bool BreedExist(string species, string name);
        void AddBreed(Breed breed);
        Task<IEnumerable<JobAdvertisement>> GetAdvertisementsAsync(string substring);
        Task<IEnumerable<JobAdvertisement>> GetAdvertisementsAsync(int farmId);
        void AddAdvertisement(int farmId, JobAdvertisement adv);
        bool AdvertisementExist(int farmId, int advId);
        Task<JobAdvertisement> GetAdvertisementAsync(int advId);
        void DeleteAdvertisment(JobAdvertisement jobAdvertisement);
        Task<ICollection<GetUserDto>> GetWorkersOnFarm(int farmId);
        Task<GetUserDto> GetWorkerOnFarm(int farmId,int workerId);
        void AddWorker(WorksOn worksOn,int farmId,int workerId);
        bool WorksOnExist(int farmId,int workerId);
        Task<ICollection<GetFarmDto>> GetFarmsWhereWorkerWorks(int workerId);
        Task<GetFarmDto> GetFarmWhereWorkerWorks(int farmId,int workerId);
        bool WorksOnExist(int worksOnId);
        Task<WorksOn> GetWorksOn(int workerId);
        bool JobAdvertisementExist(int jobAdvertisementId);
        bool JobApplicationExistForWorker(int jobApplicationid, int workerId);
        bool JobApplicationExist(int jobApplicationId, int jobAdvertisementId);
        bool JobApplicationExist(int jobApplicationId);
        Task<ICollection<JobApplication>> GetJobApplications(int jobAdvertisementId);
    }
}